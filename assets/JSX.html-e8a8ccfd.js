import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as t}from"./app-2d139388.js";const p={},e=t(`<h1 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h1><h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> What</h2><p>按照 React 官方的解释，<strong>JSX 是一个 JavaScript 的语法扩展，或者说是一个类似于 XML 的 ECMAScript 语法扩展</strong>。它本身没有太多的语法定义，也不期望引入更多的标准。 JSX 主要用于声明 React 元素，但 React 中并不强制使用 JSX。即使使用了 JSX，也会在构建过程中，通过 Babel 插件编译为 React.createElement。所以 JSX 更像是 React.createElement 的一种语法糖。</p><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> Why</h2><p>可以看出，React 团队并不想引入 JavaScript 本身以外的开发体系，而是希望通过合理的关注点分离保持组件开发的纯粹性。 因为 React 需要将组件转化为虚拟 DOM 树，所以我们在编写代码时，实际上是在手写一棵结构树。而<strong>XML 在树结构的描述上天生具有可读性强的优势</strong>。 但这样可读性强的代码仅仅是给写程序的同学看的，实际上在运行的时候，会使用 Babel 插件将 JSX 语法的代码还原为 React.createElement 的代码。 那既然可以用插件帮我们编译转换代码，那为什么不直接使用模板呢？对比其他方式: 先是模板，React 团队认为模板不应该是开发过程中的关注点，因为引入了模板语法、模板指令等概念，是一种不佳的实现方案。 其次是模板字符串，模板字符串编写的结构会造成多次内部嵌套，使整个结构变得复杂，并且优化代码提示也会变得困难重重。 最后是 JXON，同样因为代码提示困难的原因而被放弃。 所以 React 最后选用了 JSX，因为 JSX 与其设计思想贴合，不需要引入过多新的概念，对编辑器的代码提示也极为友好。</p><h2 id="how" tabindex="-1"><a class="header-anchor" href="#how" aria-hidden="true">#</a> How</h2><p>它的实现原理是这样的。Babel 读取代码并解析，生成 AST，再将 AST 传入插件层进行转换，在转换时就可以将 JSX 的结构转换为 React.createElement 的函数。如下代码所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> t <span class="token operator">=</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;custom-jsx-plugin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">JSXElement</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> openingElement <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>openingElement<span class="token punctuation">;</span>
        <span class="token keyword">var</span> tagName <span class="token operator">=</span> openingElement<span class="token punctuation">.</span>name<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> attribs <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">nullLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attribs<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> reactIdentifier <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">&quot;React&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
        <span class="token keyword">var</span> createElementIdentifier <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">&quot;createElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> callee <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">memberExpression</span><span class="token punctuation">(</span>reactIdentifier<span class="token punctuation">,</span> createElementIdentifier<span class="token punctuation">)</span>
        <span class="token keyword">var</span> callExpression <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">callExpression</span><span class="token punctuation">(</span>callee<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        callExpression<span class="token punctuation">.</span>arguments <span class="token operator">=</span> callExpression<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>callExpression<span class="token punctuation">,</span> path<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","JSX.html.vue"]]);export{k as default};
