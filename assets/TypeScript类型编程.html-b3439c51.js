const e=JSON.parse('{"key":"v-9e5d6686","path":"/posts/TypeScript/TypeScript%E7%B1%BB%E5%9E%8B%E7%BC%96%E7%A8%8B.html","title":"TypeScript-类型编程","lang":"zh-CN","frontmatter":{"date":"2022-03-31T00:00:00.000Z","title":"TypeScript-类型编程","icon":"tag","order":2,"category":["TypeScript"],"tag":["技术分享"],"description":"类型编程 TypeScript的类型系统 TypeScript给JavaScript增加了一套静态类型系统，通过 TS Compiler 编译为 JS，编译的过程做类型检查。 它并没有改变 JavaScript 的语法，只是在 JS 的基础上添加了类型语法，所以被叫做 JavaScript 的超集。 JavaScript 的标准在不断的发展，TypeScript 的类型系统也在不断完善，因为“超集”的设计理念，这两者可以很好的融合在一起，是不会有冲突的。 静态类型编程语言都有自己的类型系统，从简单到复杂可以分为 3 类：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/kiki/posts/TypeScript/TypeScript%E7%B1%BB%E5%9E%8B%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Kiki"}],["meta",{"property":"og:title","content":"TypeScript-类型编程"}],["meta",{"property":"og:description","content":"类型编程 TypeScript的类型系统 TypeScript给JavaScript增加了一套静态类型系统，通过 TS Compiler 编译为 JS，编译的过程做类型检查。 它并没有改变 JavaScript 的语法，只是在 JS 的基础上添加了类型语法，所以被叫做 JavaScript 的超集。 JavaScript 的标准在不断的发展，TypeScript 的类型系统也在不断完善，因为“超集”的设计理念，这两者可以很好的融合在一起，是不会有冲突的。 静态类型编程语言都有自己的类型系统，从简单到复杂可以分为 3 类："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-02T01:14:42.000Z"}],["meta",{"property":"article:author","content":"Miss.Kiki"}],["meta",{"property":"article:tag","content":"技术分享"}],["meta",{"property":"article:published_time","content":"2022-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-02T01:14:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript-类型编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-02T01:14:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Miss.Kiki\\",\\"url\\":\\"https://someqq.github.io/kiki/\\"}]}"]]},"headers":[{"level":2,"title":"TypeScript的类型系统","slug":"typescript的类型系统","link":"#typescript的类型系统","children":[{"level":3,"title":"简单类型系统","slug":"简单类型系统","link":"#简单类型系统","children":[]},{"level":3,"title":"支持泛型的类型系统","slug":"支持泛型的类型系统","link":"#支持泛型的类型系统","children":[]},{"level":3,"title":"支持类型编程的类型系统","slug":"支持类型编程的类型系统","link":"#支持类型编程的类型系统","children":[]},{"level":3,"title":"类型逻辑能有多复杂？","slug":"类型逻辑能有多复杂","link":"#类型逻辑能有多复杂","children":[]}]},{"level":2,"title":"TypeScript类型系统中的类型","slug":"typescript类型系统中的类型","link":"#typescript类型系统中的类型","children":[{"level":3,"title":"元组","slug":"元组","link":"#元组","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":3,"title":"类型的装饰","slug":"类型的装饰","link":"#类型的装饰","children":[]},{"level":3,"title":"TypeScript 类型系统中的类型运算","slug":"typescript-类型系统中的类型运算","link":"#typescript-类型系统中的类型运算","children":[]}]},{"level":2,"title":"编写类型技巧","slug":"编写类型技巧","link":"#编写类型技巧","children":[{"level":3,"title":"模式匹配","slug":"模式匹配","link":"#模式匹配","children":[]},{"level":3,"title":"重新构造","slug":"重新构造","link":"#重新构造","children":[]},{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]}]},{"level":2,"title":"TypeScript内置高级类型","slug":"typescript内置高级类型","link":"#typescript内置高级类型","children":[{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":3,"title":"ReturnType","slug":"returntype","link":"#returntype","children":[]},{"level":3,"title":"ConstructorParameters","slug":"constructorparameters","link":"#constructorparameters","children":[]},{"level":3,"title":"Partial","slug":"partial","link":"#partial","children":[]},{"level":3,"title":"Required","slug":"required","link":"#required","children":[]},{"level":3,"title":"Readonly","slug":"readonly","link":"#readonly","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1687836497000,"updatedTime":1688260482000,"contributors":[{"name":"guoyiqi","email":"guoyiqi@uino.com","commits":2}]},"readingTime":{"minutes":19.14,"words":5741},"filePathRelative":"posts/TypeScript/TypeScript类型编程.md","localizedDate":"2022年3月31日","excerpt":"<h1> 类型编程</h1>\\n<h2> TypeScript的类型系统</h2>\\n<p>TypeScript给JavaScript增加了一套静态类型系统，通过 TS Compiler 编译为 JS，编译的过程做类型检查。</p>\\n<p>它并没有改变 JavaScript 的语法，只是在 JS 的基础上添加了类型语法，所以被叫做 JavaScript 的超集。</p>\\n<p>JavaScript 的标准在不断的发展，TypeScript 的类型系统也在不断完善，因为“超集”的设计理念，这两者可以很好的融合在一起，是不会有冲突的。</p>\\n<p>静态类型编程语言都有自己的类型系统，从简单到复杂可以分为 3 类：</p>","autoDesc":true}');export{e as data};
